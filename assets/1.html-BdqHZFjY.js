import{_ as i,c as l,a as n,o as t}from"./app-tGapivoA.js";const e={};function r(s,a){return t(),l("div",null,a[0]||(a[0]=[n('<h1 id="_1-выбор-темы-проекта-и-формирование-требовании" tabindex="-1"><a class="header-anchor" href="#_1-выбор-темы-проекта-и-формирование-требовании"><span>1. Выбор темы проекта и формирование требований</span></a></h1><p>Данная лабораторная работа направлена на приобретение навыков постановки цели и задач проекта, формирования требований к высоконагруженному приложению.</p><h2 id="задание" tabindex="-1"><a class="header-anchor" href="#задание"><span>Задание</span></a></h2><p>Основной задачей первой лабораторной работы является описание проекта приложения, которое будет работать в условиях высоких нагрузок.</p><h3 id="выбор-темы-проекта" tabindex="-1"><a class="header-anchor" href="#выбор-темы-проекта"><span>Выбор темы проекта</span></a></h3><p>Каждая команда должна выбрать тему для разработки высоконагруженного приложения.</p><h4 id="примеры-тем" tabindex="-1"><a class="header-anchor" href="#примеры-тем"><span>Примеры тем:</span></a></h4><ul><li><strong>Онлайн-магазин</strong> (например, платформа для продажи книг, одежды или электроники);</li><li><strong>Социальная сеть</strong> (например, для обмена фотографиями, публикациями или контентом);</li><li><strong>Сервис для обмена сообщениями</strong> (например, мессенджер или платформа для командного общения).</li></ul><div class="hint-container important"><p class="hint-container-title">Важно</p><p>Заранее продумайте функциональность проекта, так как к концу курса она должна включать следующие элементы:</p><ul><li><strong>API</strong> - реализованный в микросервисной архитектуре;</li><li><strong>База данных</strong> - на выбор студентов;</li><li><strong>Балансировщик нагрузки</strong> - Nginx;</li><li><strong>Брокер сообщений</strong> - на выбор студентов;</li><li><strong>Кэш</strong> - на выбор студентов;</li><li><strong>ELK-стек</strong> Elasticsearch, Logstash и Kibana, для сбора и анализа логов;</li><li><strong>Мониторинг</strong> Grafana и Prometheus.</li></ul></div><h3 id="формирование-требовании" tabindex="-1"><a class="header-anchor" href="#формирование-требовании"><span>Формирование требований</span></a></h3><p>После выбора темы проекта необходимо определить ключевые требования к вашему приложению.</p><ol><li><p><strong>Максимальное количество пользователей, поддерживаемых в каждый момент времени</strong><br> Определите, сколько пользователей ваше приложение должно быть способно обслуживать одновременно:</p><ul><li>Ожидаемое количество одновременных сессий.</li><li>Количество пользователей, активно взаимодействующих с приложением в реальном времени.</li></ul></li><li><p><strong>Требуемая скорость обработки запросов</strong><br> Установите, какие показатели времени отклика необходимо достигнуть для обеспечения нормальной работы приложения:</p><ul><li>Время отклика на запросы пользователей (например, время ответа API).</li><li>Время обработки запросов на уровне базы данных и взаимодействия между сервисами.</li></ul></li><li><p><strong>Объем хранимой информации</strong><br> Оцените, какой объем данных приложение должно быть в состоянии хранить и обрабатывать:</p><ul><li>Прогнозируемый объем данных на старте.</li><li>Возможный рост объема данных с течением времени, включая логи, пользовательские данные и контент.</li></ul></li></ol><div class="hint-container important"><p class="hint-container-title">Важно</p><p>Данные требования нужно будет добавить в <code>README.md</code> при инициализации проекта.</p></div><h3 id="диаграмма-прецедентов" tabindex="-1"><a class="header-anchor" href="#диаграмма-прецедентов"><span>Диаграмма прецедентов</span></a></h3><p>Необходимо разработать <a href="https://drive.google.com/file/d/1qoTxBFyAIKRhoO7N9tBUer_Oz8oX1hlz/view?usp=drive_link" target="_blank" rel="noopener noreferrer">Диаграмму прецедентов</a> в UML нотации, которая наглядно иллюстрирует взаимодействие пользователей с вашим приложением.</p><p>Диаграмма должна включать:</p><ul><li><strong>Actor</strong> пользователей или системы, взаимодействующих с приложением.</li><li><strong>Use case</strong> основные действия и взаимодействия с системой.</li></ul><h3 id="инициализация-проекта" tabindex="-1"><a class="header-anchor" href="#инициализация-проекта"><span>Инициализация проекта</span></a></h3><p>После выбора темы и формирования требований необходимо инициализировать репозиторий с исходным кодом проекта:</p><ol><li>В репозитории курса <a href="https://code.cloud.cosm-lab.science/itmo-teaching/highload-2025" target="_blank" rel="noopener noreferrer">highload-2025</a> создать отдельную ветку с названием, соответствующим ID вашего ИСУ.</li><li>Для своего проекта создайте <code>README.md</code> файл, в который добавите описание своего проекта.</li><li>Добавьте название проект и ФИО в таблицу проектов в репозитории с заданием, согласно примеру.</li></ol><div class="hint-container tip"><p class="hint-container-title">Примечание</p><p>Не нужно создавать <code>pull request</code> для своей ветки, так как они не будут сливаться с <code>main</code>. Это позволит преподавателю вносить общие изменения в <code>main</code>, которые потом можно будет подтянуть в свои ветки по мере необходимости.</p></div><h2 id="критерии-оценки" tabindex="-1"><a class="header-anchor" href="#критерии-оценки"><span>Критерии оценки</span></a></h2><ol><li>Полнота и корректность выполнения всех этапов лабораторной работы.</li><li>Детализация сформированных требований к проекту.</li><li>Точность соответствия представленных диаграмм нотации UML.</li><li>Точность и полнота ответов на вопросы преподавателя по содержанию лабораторной работы при ее защите.</li></ol>',23)]))}const h=i(e,[["render",r],["__file","1.html.vue"]]),p=JSON.parse('{"path":"/task/task/1.html","title":"1. Выбор темы проекта и формирование требований","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"task/task/1.md"}');export{h as comp,p as data};
