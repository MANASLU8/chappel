import{_ as n,c as e,a as s,o as i}from"./app-tGapivoA.js";const l={};function t(r,a){return i(),e("div",null,a[0]||(a[0]=[s('<h1 id="_4-нагрузочное-тестирование" tabindex="-1"><a class="header-anchor" href="#_4-нагрузочное-тестирование"><span>4. Нагрузочное тестирование</span></a></h1><p>Данная лабораторная работа направлена на освоение навыков выполнения нагрузочного тестирования, выявления узких мест в системе и интеграции тестов в процесс CI/CD.</p><h2 id="задание" tabindex="-1"><a class="header-anchor" href="#задание"><span>Задание</span></a></h2><h3 id="добавление-tsung-в-проект" tabindex="-1"><a class="header-anchor" href="#добавление-tsung-в-проект"><span>Добавление Tsung в проект</span></a></h3><p>Подготовьте контейнер с инструментом <strong>Tsung</strong> и добавьте его в файл <code>docker-compose.yml</code> для последующего использования при нагрузочном тестировании.</p><h3 id="описание-сценариев-тестирования" tabindex="-1"><a class="header-anchor" href="#описание-сценариев-тестирования"><span>Описание сценариев тестирования</span></a></h3><p>Разработайте набор сценариев нагрузочного тестирования, который будет охватывать основные аспекты работы системы, такие как корректная обработка запросов API, взаимодействие с базой данных и другие функции.</p><p>Должны быть предусмотрены следующие сценарии:</p><ol><li>Много пользователей с низкой частотой запросов от каждого.</li><li>Мало пользователей, но высокая частота запросов от каждого.</li><li>Пиковая нагрузка с большим количеством пользователей и высокой частотой запросов.</li></ol><h3 id="выполнение-нагрузочного-тестирования" tabindex="-1"><a class="header-anchor" href="#выполнение-нагрузочного-тестирования"><span>Выполнение нагрузочного тестирования</span></a></h3><p>Выполните нагрузочное тестирование системы, применяя ранее подготовленные сценарии для оценки производительности и устойчивости системы при различных условиях.</p><p>В ходе тестирования:</p><ul><li>Оцените работу системы при различных типах нагрузки.</li><li>Соберите данные о времени отклика, пропускной способности, использовании ресурсов и других метрик производительности.</li><li>Проанализируйте результаты для выявления узких мест, которые можно оптимизировать.</li></ul><p>После выполнения тестов сформируйте отчет, который должен включать:</p><ul><li>Графики, отображающие динамику производительности.</li><li>Основные выводы по результатам тестирования.</li><li>Предложения по улучшению производительности и устранению выявленных проблем.</li></ul><div class="hint-container tip"><p class="hint-container-title">Рекомендация</p><p>Соберите данные не только о производительности, но и о загрузке системы в момент пиковых нагрузок. Для этого используйте <strong>Prometheus</strong> и <strong>Grafana</strong>.</p></div><h3 id="интеграция-нагрузочных-тестов-в-ci-cd" tabindex="-1"><a class="header-anchor" href="#интеграция-нагрузочных-тестов-в-ci-cd"><span>Интеграция нагрузочных тестов в CI/CD</span></a></h3><p>Добавьте сценарии нагрузочного тестирования в пайплайн Jenkins, чтобы они выполнялись автоматически на этапе тестирования.</p><h2 id="критерии-оценки" tabindex="-1"><a class="header-anchor" href="#критерии-оценки"><span>Критерии оценки</span></a></h2><p>При оценке результатов лабораторной работы учитываются следующие аспекты проделанной работы:</p><ol><li>Качество и обоснованность составленных сценариев нагрузочного тестирования.</li><li>Умение анализировать результаты нагрузочного тестирования и выявлять узкие места в системе.</li><li>Точность и полнота ответов на вопросы преподавателя по содержанию лабораторной работы при ее защите.</li></ol>',21)]))}const h=n(l,[["render",t],["__file","4.html.vue"]]),o=JSON.parse('{"path":"/task/task/4.html","title":"4. Нагрузочное тестирование","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"task/task/4.md"}');export{h as comp,o as data};
