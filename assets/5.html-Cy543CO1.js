import{_ as n,c as s,a as t,o as e}from"./app-tGapivoA.js";const r={};function i(o,a){return e(),s("div",null,a[0]||(a[0]=[t('<h1 id="_5-масштабирование" tabindex="-1"><a class="header-anchor" href="#_5-масштабирование"><span>5. Масштабирование</span></a></h1><p>Данная лабораторная работа направлена на освоение методов вертикального и горизонтального масштабирования.</p><h2 id="задание" tabindex="-1"><a class="header-anchor" href="#задание"><span>Задание</span></a></h2><p>Для выполнения данной лабораторной работы необходимо будет исследовать возможности <strong>вертикального</strong> и <strong>горизонтального масштабирования</strong>. Для этого используйте сценарии нагрузочного тестирования, которые были реализованы в предыдущей лабораторной работе.</p><h3 id="вертикальное-масштабирование" tabindex="-1"><a class="header-anchor" href="#вертикальное-масштабирование"><span>Вертикальное масштабирование</span></a></h3><p>Для вертикального масштабирования увеличьте количество ядер и оперативной памяти, доступных сервисам системы. Настройте доступные ресурсы для каждого сервиса по-отдельности с помощью <strong>docker</strong>, увеличив количество выделяемых CPU и памяти, затем проведите нагрузочное тестирование. Оцените, как увеличение ресурсов влияет на производительность сервиса и системы в целом.</p><div class="hint-container tip"><p class="hint-container-title">Рекомендация</p><p>Основываясь на результатах нагрузочного тестирования, определите оптимальное количество выделяемых CPU и памяти.</p></div><h3 id="горизонтальное-масштабирование" tabindex="-1"><a class="header-anchor" href="#горизонтальное-масштабирование"><span>Горизонтальное масштабирование</span></a></h3><p>Для горизонтального масштабирования создайте несколько экземпляров ваших сервисов и запустите их на нескольких узлах. Проведите нагрузочное тестирование, чтобы оценить, как меняется взаимодействие экземпляров сервисов при увеличении нагрузки.</p><div class="hint-container tip"><p class="hint-container-title">Рекомендация</p><p>Основываясь на результатах нагрузочного тестирования, определите оптимальное количество экземпляров сервисов.</p></div><h3 id="балансировка-нагрузки" tabindex="-1"><a class="header-anchor" href="#балансировка-нагрузки"><span>Балансировка нагрузки</span></a></h3><p>Добавьте балансировщик нагрузки <strong>Nginx</strong>, который будет распределять трафик между несколькими экземплярами вашего сервиса. Проведите тестирование различных методов распределения нагрузки, чтобы определить, какой метод подходит для вашего случая.</p><p>Настройте несколько методов балансировки нагрузки:</p><ul><li><strong>Round-robin</strong>.</li><li><strong>Least-connections</strong>.</li><li><strong>Random</strong>.</li></ul><h3 id="анализ-результатов" tabindex="-1"><a class="header-anchor" href="#анализ-результатов"><span>Анализ результатов</span></a></h3><p>Проанализируйте производительность системы при различных подходах к масштабированию. Определите оптимальные настройки для обеспечения баланса между производительностью и ресурсами.</p><h2 id="критерии-оценки" tabindex="-1"><a class="header-anchor" href="#критерии-оценки"><span>Критерии оценки</span></a></h2><p>При оценке результатов выполнения лабораторной работы учитываются следующие аспекты:</p><ol><li>Полнота тестирования результатов вертикального и горизонтального масштабирования.</li><li>Умение анализировать результаты тестирования и формулировать выводы о производительности системы.</li><li>Точность и полнота ответов на вопросы преподавателя по содержанию лабораторной работы при ее защите.</li></ol>',19)]))}const h=n(r,[["render",i],["__file","5.html.vue"]]),l=JSON.parse('{"path":"/task/task/5.html","title":"5. Масштабирование","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"task/task/5.md"}');export{h as comp,l as data};
